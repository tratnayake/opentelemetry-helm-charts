# Default values for opentelemetry-collector.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

# Valid values are "daemonset", "deployment", and "statefulset".
mode: "deployment"

# Handles basic configuration of components that
# also require k8s modifications to work correctly.
# .Values.config can be used to modify/add to a preset
# component configuration, but CANNOT be used to remove
# preset configuration. If you require removal of any
# sections of a preset configuration, you cannot use
# the preset. Instead, configure the component manually in
# .Values.config and use the other fields supplied in the
# values.yaml to configure k8s as necessary.
presets:
  # Configures the collector to collect logs.
  # Adds the filelog receiver to the logs pipeline
  # and adds the necessary volumes and volume mounts.
  # Best used with mode = daemonset.
  logsCollection:
    enabled: false
    includeCollectorLogs: false
  # Configures the collector to collect host metrics.
  # Adds the hostmetrics receiver to the metrics pipeline
  # and adds the necessary volumes and volume mounts.
  # Best used with mode = daemonset.
  hostMetrics:
    enabled: false

configMap:
  # Specifies whether a configMap should be created (true by default)
  create: true

config:
  receivers:
    # Generate traces from the given topology file (env var: TOPO_FILE)
    generator:
      path: "/etc/otel/scenarios/${TOPO_FILE}.yaml"
      api:
        endpoint: 0.0.0.0:9999
        cors_allowed_origins:
          - '*'

  processors:
    batch: {}

    spanmetrics:
      metrics_exporter: otlp
      dimensions:
        - name: http.method

  exporters:
    logging: {}
    # Export to Lightstep Public Satellites
    otlp:
      endpoint: "${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT}"
      insecure_skip_verify: true
      insecure: "${OTEL_INSECURE}"
      headers:
        "lightstep-access-token": "${LS_ACCESS_TOKEN}"

  service:
    pipelines:
      metrics:
        receivers:
          - generator
        processors:
          - batch
        exporters:
          - otlp
          - logging

      traces:
        receivers:
          - generator
        processors:
          - spanmetrics
          - batch
        exporters:
          - logging
          - otlp

image:
  # If you want to use the core image `otel/opentelemetry-collector`, you also need to change `command.name` value to `otelcol`.
  # NOTE: Default set to use `terraform-shop-public` for development work. 
  repository: gcr.io/terraform-shop-public/telemetry-generator
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # NOTE: This image tag will change
  tag: 0.0.6

# OpenTelemetry Collector executable
command:
  name: otel/telemetry-generator

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

clusterRole:
  # Specifies whether a clusterRole should be created
  create: false
  # Annotations to add to the clusterRole
  annotations: {}
  # The name of the clusterRole to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # A set of rules as documented here : https://kubernetes.io/docs/reference/access-authn-authz/rbac/
  rules: []
  # - apiGroups:
  #   - ''
  #   resources:
  #   - 'pods'
  #   - 'nodes'
  #   verbs:
  #   - 'get'
  #   - 'list'
  #   - 'watch'

  clusterRoleBinding:
    # Annotations to add to the clusterRoleBinding
    annotations: {}
    # The name of the clusterRoleBinding to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

podSecurityContext: {}
securityContext: {}

nodeSelector: {}
tolerations: []
affinity: {}

# Allows for pod scheduler prioritisation
priorityClassName: ""

# extraVolumes:
#   - name: topo-volume
#     configMap:
#     # This configMap name must be unique in the cluster
#     # in order to run multiple deployments.
#       name: ""
# extraVolumeMounts:
#   - name: topo-volume
#     mountPath: /etc/otel

# Configuration for ports
ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP

containerLogs:
  enabled: false

resources:
  limits:
    cpu: 1
    memory: 1Gi

podAnnotations: {}

podLabels: {}

# Host networking requested for this pod. Use the host's network namespace.
hostNetwork: false

# Pod DNS policy ClusterFirst, ClusterFirstWithHostNet, None, Default, None
dnsPolicy: ""

# only used with deployment mode
replicaCount: 1

annotations: {}

# List of init container specs, e.g. for copying a binary to be executed as a lifecycle hook.
initContainers: []
# initContainers:
#   - name: test
#     command:
#       - cp
#     args:
#       - /bin/sleep
#       - /test/sleep
#     image: busybox:latest
#     volumeMounts:
#       - name: test
#         mountPath: /test

# Pod lifecycle policies.
lifecycleHooks: {}
# lifecycleHooks:
#   preStop:
#     exec:
#       command:
#       - /test/sleep
#       - "5"

service:
  type: ClusterIP
  annotations: {}

ingress:
  enabled: false
  # annotations: {}
  # ingressClassName: nginx
  # hosts:
  #   - host: collector.example.com
  #     paths:
  #       - path: /
  #         pathType: Prefix
  #         port: 4318
  # tls:
  #   - secretName: collector-tls
  #     hosts:
  #       - collector.example.com

  # Additional ingresses - only created if ingress.enabled is true
  # Useful for when differently annotated ingress services are required
  # Each additional ingress needs key "name" set to something unique
  additionalIngresses: []
  # - name: cloudwatch
  #   ingressClassName: nginx
  #   annotations: {}
  #   hosts:
  #     - host: collector.example.com
  #       paths:
  #         - path: /
  #           pathType: Prefix
  #           port: 4318
  #   tls:
  #     - secretName: collector-tls
  #       hosts:
  #         - collector.example.com

podMonitor:
  # The pod monitor by default scrapes the metrics port.
  # The metrics port needs to be enabled as well.
  enabled: false
  metricsEndpoints:
  - port: metrics
    # interval: 15s

  # additional labels for the PodMonitor
  extraLabels: {}
  #   release: kube-prometheus-stack

serviceMonitor:
  # The service monitor by default scrapes the metrics port.
  # The metrics port needs to be enabled as well.
  enabled: false
  metricsEndpoints:
  - port: metrics
    # interval: 15s

  # additional labels for the ServiceMonitor
  extraLabels: {}
  #  release: kube-prometheus-stack

# PodDisruptionBudget is used only if deployment enabled
podDisruptionBudget:
  enabled: false
#   minAvailable: 2
#   maxUnavailable: 1

# autoscaling is used only if deployment enabled
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

prometheusRule:
  enabled: false
  groups: []
  # Create default rules for monitoring the collector
  defaultRules:
    enabled: false

  # additional labels for the PrometheusRule
  extraLabels: {}

statefulset:
  # volumeClaimTemplates for a statefulset
  volumeClaimTemplates: []
  podManagementPolicy:  "Parallel"

extraEnvs:
  # - name: TOPO_FILENAME
  #   value: ""
  - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
  # By default set to use staging endpoint (so as to not pollute production)
    value: ingest.staging.lightstep.com:443

# NOTE: This needs to be set at runtime by using `helm [...] --set access_token=$LS_ACCESS_TOKEN`
access_token: none
# NOTE: This points to the filename of the scenario in ./scenarios/
# -  This needs to be set up at runtime by using --set scenario_file=scenario1
scenario_file: "default"
